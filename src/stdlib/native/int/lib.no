use std::bits;
use std::comparator;
use std::int;

// A hint function for calculating quotient and remainder.
hint fn divmod(dividend: Field, divisor: Field) -> [Field; 2];

// u8
// must use new() to create a Uint8, so the value is range checked
struct Uint8 {
    inner: Field,
}

fn Uint8.new(val: Field) -> Uint8 {
    let bit_len = 8;

    // has to ensure multiply won't overflow prime field
    bits::check_field_size(bit_len * 2);

    // range check
    let ignore_ = bits::to_bits(bit_len, val);

    return Uint8 {
        inner: val
    };
}

// u16
// must use new() to create a Uint16, so the value is range checked
struct Uint16 {
    inner: Field
}

fn Uint16.new(val: Field) -> Uint16 {
    let bit_len = 16;

    // has to ensure multiply won't overflow prime field
    bits::check_field_size(bit_len * 2);

    // range check
    let ignore_ = bits::to_bits(bit_len, val);

    return Uint16 {
        inner: val
    };
}

// u32
// must use new() to create a Uint32, so the value is range checked
struct Uint32 {
    inner: Field
}

fn Uint32.new(val: Field) -> Uint32 {
    let bit_len = 32;

    // has to ensure multiply won't overflow prime field
    bits::check_field_size(bit_len * 2);

    // range check
    let ignore_ = bits::to_bits(bit_len, val);

    return Uint32 {
        inner: val
    };
}

// u64
// must use new() to create a Uint64, so the value is range checked
struct Uint64 {
    inner: Field
}

fn Uint64.new(val: Field) -> Uint64 {
    let bit_len = 64;

    // has to ensure multiply won't overflow prime field
    bits::check_field_size(bit_len * 2);

    // range check
    let ignore_ = bits::to_bits(bit_len, val);

    return Uint64 {
        inner: val
    };
}

// implement comparator
fn Uint8.less_than(self, rhs: Uint8) -> Bool {
    return comparator::less_than(8, self.inner, rhs.inner);
}

fn Uint8.less_eq_than(self, rhs: Uint8) -> Bool {
    return comparator::less_eq_than(8, self.inner, rhs.inner);
}

fn Uint16.less_than(self, rhs: Uint16) -> Bool {
    return comparator::less_than(16, self.inner, rhs.inner);
}

fn Uint16.less_eq_than(self, rhs: Uint16) -> Bool {
    return comparator::less_eq_than(16, self.inner, rhs.inner);
}

fn Uint32.less_than(self, rhs: Uint32) -> Bool {
    return comparator::less_than(32, self.inner, rhs.inner);
}

fn Uint32.less_eq_than(self, rhs: Uint32) -> Bool {
    return comparator::less_eq_than(32, self.inner, rhs.inner);
}

fn Uint64.less_than(self, rhs: Uint64) -> Bool {
    return comparator::less_than(64, self.inner, rhs.inner);
}

fn Uint64.less_eq_than(self, rhs: Uint64) -> Bool {
    return comparator::less_eq_than(64, self.inner, rhs.inner);
}

// +
fn Uint8.add(self, rhs: Uint8) -> Uint8 {
    return Uint8.new(self.inner + rhs.inner);
}

fn Uint16.add(self, rhs: Uint16) -> Uint16 {
    return Uint16.new(self.inner + rhs.inner);
}

fn Uint32.add(self, rhs: Uint32) -> Uint32 {
    return Uint32.new(self.inner + rhs.inner);
}

fn Uint64.add(self, rhs: Uint64) -> Uint64 {
    return Uint64.new(self.inner + rhs.inner);
}

// -
fn Uint8.sub(self, rhs: Uint8) -> Uint8 {
    return Uint8.new(self.inner - rhs.inner);
}

fn Uint16.sub(self, rhs: Uint16) -> Uint16 {
    return Uint16.new(self.inner - rhs.inner);
}

fn Uint32.sub(self, rhs: Uint32) -> Uint32 {
    return Uint32.new(self.inner - rhs.inner);
}

fn Uint64.sub(self, rhs: Uint64) -> Uint64 {
    return Uint64.new(self.inner - rhs.inner);
}

// *
fn Uint8.mul(self, rhs: Uint8) -> Uint8 {
    return Uint8.new(self.inner * rhs.inner);
}

fn Uint16.mul(self, rhs: Uint16) -> Uint16 {
    return Uint16.new(self.inner * rhs.inner);
}

fn Uint32.mul(self, rhs: Uint32) -> Uint32 {
    return Uint32.new(self.inner * rhs.inner);
}

fn Uint64.mul(self, rhs: Uint64) -> Uint64 {
    return Uint64.new(self.inner * rhs.inner);
}

// Division with quotient and remainder
// a = q * b + r
fn Uint8.divmod(self, rhs: Uint8) -> [Uint8; 2] {
    // not allow divide by zero
    assert(rhs.inner != 0);

    let q_rem = unsafe int::divmod(self.inner, rhs.inner);
    let quotient = Uint8.new(q_rem[0]);
    let rem = Uint8.new(q_rem[1]);

    // r < b
    let is_lt = rem.less_than(rhs);
    assert(is_lt);

    let qb = quotient.mul(rhs); // q * b
    let expected = qb.add(rem); // a = q * b + r

    assert_eq(self.inner, expected.inner);

    return [quotient, rem];
}

fn Uint16.divmod(self, rhs: Uint16) -> [Uint16; 2] {
    // not allow divide by zero
    assert(rhs.inner != 0);

    let q_rem = unsafe int::divmod(self.inner, rhs.inner);
    let quotient = Uint16.new(q_rem[0]);
    let rem = Uint16.new(q_rem[1]);

    // r < b
    let is_lt = rem.less_than(rhs);
    assert(is_lt);

    let qb = quotient.mul(rhs); // q * b
    let expected = qb.add(rem); // a = q * b + r

    assert_eq(self.inner, expected.inner);

    return [quotient, rem];
}

fn Uint32.divmod(self, rhs: Uint32) -> [Uint32; 2] {
    // not allow divide by zero
    assert(rhs.inner != 0);

    let q_rem = unsafe int::divmod(self.inner, rhs.inner);
    let quotient = Uint32.new(q_rem[0]);
    let rem = Uint32.new(q_rem[1]);

    // r < b
    let is_lt = rem.less_than(rhs);
    assert(is_lt);

    let qb = quotient.mul(rhs); // q * b
    let expected = qb.add(rem); // a = q * b + r

    assert_eq(self.inner, expected.inner);

    return [quotient, rem];
}

fn Uint64.divmod(self, rhs: Uint64) -> [Uint64; 2] {
    // not allow divide by zero
    assert(rhs.inner != 0);

    let q_rem = unsafe int::divmod(self.inner, rhs.inner);
    let quotient = Uint64.new(q_rem[0]);
    let rem = Uint64.new(q_rem[1]);

    // r < b
    let is_lt = rem.less_than(rhs);
    assert(is_lt);

    let qb = quotient.mul(rhs); // q * b
    let expected = qb.add(rem); // a = q * b + r

    assert_eq(self.inner, expected.inner);

    return [quotient, rem];
}

// Division (quotient only)
fn Uint8.div(self, rhs: Uint8) -> Uint8 {
    let res = self.divmod(rhs);
    return res[0];
}

fn Uint16.div(self, rhs: Uint16) -> Uint16 {
    let res = self.divmod(rhs);
    return res[0];
}

fn Uint32.div(self, rhs: Uint32) -> Uint32 {
    let res = self.divmod(rhs);
    return res[0];
}

fn Uint64.div(self, rhs: Uint64) -> Uint64 {
    let res = self.divmod(rhs);
    return res[0];
}

// Modulo (remainder only)
fn Uint8.mod(self, rhs: Uint8) -> Uint8 {
    let res = self.divmod(rhs);
    return res[1];
}

fn Uint16.mod(self, rhs: Uint16) -> Uint16 {
    let res = self.divmod(rhs);
    return res[1];
}

fn Uint32.mod(self, rhs: Uint32) -> Uint32 {
    let res = self.divmod(rhs);
    return res[1];
}

fn Uint64.mod(self, rhs: Uint64) -> Uint64 {
    let res = self.divmod(rhs);
    return res[1];
}

// implement to field
fn Uint8.to_field(self) -> Field {
    return self.inner;
}

fn Uint16.to_field(self) -> Field {
    return self.inner;
}

fn Uint32.to_field(self) -> Field {
    return self.inner;
}

fn Uint64.to_field(self) -> Field {
    return self.inner;
}
    