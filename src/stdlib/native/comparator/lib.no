use std::bits;

/// Checks if `lhs` is less than `rhs` by evaluating the carry bit after addition and subtraction.
/// 
/// # Parameters
/// - `LEN`: The assumped bit length of both `lhs` and `rhs`.
/// - `lhs`: The left-hand side `Field` value to be compared.
/// - `rhs`: The right-hand side `Field` value to be compared.
///
/// # Returns
/// - `Bool`: `true` if `lhs` is less than `rhs`, otherwise `false`.
///
/// # Proof
/// - Adding `pow2` to `lhs` ensures a carry bit is added to the result, creating a bit array of length `LEN + 1`.
/// - If `lhs < rhs`, then `lhs - rhs < 0`, making `(1 << LEN) + lhs - rhs` less than `1 << LEN`, resulting in a carry bit of `0`.
/// - Otherwise, the carry bit will be `1`.
///
fn less_than(const LEN: Field, lhs: Field, rhs: Field) -> Bool {
    let carry_bit_len = LEN + 1;

    // Calculate 2^LEN using bit shifts.
    let mut pow2 = 1;
    for ii in 0..LEN {
        pow2 = pow2 + pow2;
    }

    // Calculate the adjusted sum to determine the carry bit.
    let sum = (pow2 + lhs) - rhs;
    let sum_bit = bits::to_bits(carry_bit_len, sum);

    let b1 = false;
    let b2 = true;
    let res = if sum_bit[LEN] { b1 } else { b2 };

    return res;
}

/// Checks if `lhs` is less than or equal to `rhs` using the `less_than` function.
/// 
/// # Parameters
/// - `LEN`: The assumped bit length of both `lhs` and `rhs`.
/// - `lhs`: The left-hand side `Field` value to be compared.
/// - `rhs`: The right-hand side `Field` value to be compared.
///
/// # Returns
/// - `Bool`: `true` if `lhs` is less than or equal to `rhs`, otherwise `false`.
///
/// # Proof
/// By adding 1 to rhs can increase upper bound by 1 for the lhs.
/// Thus, `lhs < lhs + 1` => `lhs <= rhs`.
/// ```
fn less_eq_than(const LEN: Field, lhs: Field, rhs: Field) -> Bool {
    return less_than(LEN, lhs, rhs + 1);
}
