struct Thing {
    xx: Field,
    yy: Field,
}

fn init_arr(const LEN: Field) -> [Field; LEN] {
    return [0; LEN];
}

hint fn cst_div(const lhs: Field, const rhs: Field) -> Field {
    return lhs / rhs;
}

hint fn mul(lhs: Field, rhs: Field) -> Field {
    return lhs * rhs;
}

hint fn add_mul_2(lhs: Field, rhs: Field) -> Field {
    let sum = lhs + rhs;
    return unsafe mul(sum, 2);
}

hint fn div(lhs: Field, rhs: Field) -> Field {
    return lhs / rhs;
}

hint fn ite(lhs: Field, rhs: Field) -> Field {
    return if lhs != rhs { lhs } else { rhs };
}

hint fn exp(const EXP: Field, val: Field) -> Field {
    let mut res = val;

    for num in 1..EXP {
        res = res * val;
    }

    return res;
}

hint fn sub(lhs: Field, rhs: Field) -> Field {
    return lhs - rhs;
}

hint fn boolean_ops(lhs: Field, rhs: Field) -> [Bool; 3] {
    let aa = lhs == rhs;

    let bb = aa && false;
    let cc = bb || true;

    return [aa, bb, cc];
}

hint fn multiple_inputs_outputs(aa: [Field; 2]) -> Thing {
    return Thing {
        xx: aa[0],
        yy: aa[1],
    };
}

fn main(pub public_input: Field, private_input: Field) -> Field {
    // have to assert these inputs, otherwise it throws vars not in circuit error
    assert_eq(public_input, 2);
    assert_eq(private_input, 2);

    let xx = unsafe add_mul_2(public_input, private_input); 
    let yy = unsafe mul(public_input, private_input);
    assert_eq(xx, yy * 2); 

    let zz = unsafe div(xx, public_input);
    assert_eq(zz, yy);

    let ww = unsafe ite(xx, yy);
    assert_eq(ww, xx);

    let kk = unsafe exp(4, public_input);
    assert_eq(kk, 16);

    let thing = unsafe multiple_inputs_outputs([public_input, 3]);
    // have to include all the outputs from hint function, otherwise it throws vars not in circuit error.
    // this is because each individual element in the hint output maps to a separate cell var in noname.
    assert_eq(thing.xx, public_input);
    assert_eq(thing.yy, 3);

    let jj = unsafe sub(thing.xx + 1, public_input);
    assert_eq(jj, 1);

    let oo = unsafe boolean_ops(2, 2);
    assert(oo[0]);
    assert(!oo[1]);
    assert(oo[2]);

    // mast phase can fold the constant value using hint functions
    let one = unsafe cst_div(2, 2);
    let arr = init_arr(one);
    assert_eq(arr[0], 0);
    return xx;
}