struct Thing {
    xx: Field,
    tuple_field: (Field,Bool)
}

// return tuples from functions
fn Thing.new(xx: Field , tup: (Field,Bool)) -> (Thing , (Field,Bool)) {
    return (
        Thing {
        xx: xx,
        tuple_field:tup
        }, 
        tup
    );
}

fn generic_array_tuple_test(var : ([[Field;NN];LEN],Bool)) -> (Field , [Field;NN]) {
    let zero = 0;
    let result = if var[1] {var[0][LEN - 1][NN - 1]} else { var[0][LEN - 2][NN - 2] };
    return (result , var[0][LEN - 1]);
}

// xx should be 0
fn main(pub xx: [Field; 2]) -> Field {
    // creation of new tuple with different types
    let tup = (1, true);

    // create nested tuples 
    let nested_tup = ((false, [1,2,3]), 1);
    log(nested_tup); // (1, (true , [1,2,3]))
    
    let incr = nested_tup[1]; // 1

    // tuples can be input to function
    let mut thing = Thing.new(xx[1] , (xx[0] , xx[0] == 0));

    // you can access a tuple type just like you access a array 
    thing[0].tuple_field[0] += incr;
    log(thing[0].tuple_field[0]);
    let new_allocation = [xx,xx];
    let ret = generic_array_tuple_test((new_allocation, true));

    assert_eq(thing[0].tuple_field[0] , 1);
    log(ret[1]); // logs xx i.e [0,123]
    
    return ret[0];
}