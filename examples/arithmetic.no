fn add(public_input: Field, private_input: Field) -> Field {
    let xx = private_input + public_input;
    return(xx);
}

fn sub(public_input: Field, private_input: Field) -> Field {
    let xx = private_input - public_input;
    return(xx);
}

fn mul(public_input: Field, private_input: Field) -> Field {
    let xx = private_input * public_input;
    return(xx);
}

// TODO: when if else is implemented use `pub op: Field` to navigate between operations
fn main(pub public_input: Field, private_input: Field, pub target: Field) {
    let xx = add(public_input, private_input);
    // let xx = sub(public_input, private_input);    
    // let xx = mul(public_input, private_input);

    assert_eq(xx,target);
}